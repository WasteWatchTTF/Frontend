# ==========================================
# WASTEWATCH - NGINX PRODUCTION CONFIGURATION
# ==========================================

# Main nginx configuration
user nginx;
worker_processes auto;
pid /run/nginx.pid;

# Events block
events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

# HTTP block - QUI DEVONO STARE LE DIRETTIVE
http {
    # Include MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones - ORA SONO NEL POSTO GIUSTO
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=uploads:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Upstream servers - ORA SONO NEL POSTO GIUSTO
    upstream wastewatch-web {
        server wastewatch-web:8080;
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }

    upstream wastewatch_frontend {
        server wastewatch-frontend:80;
        keepalive 16;
    }

    # HTTP server - redirect to HTTPS
    server {
        listen 80;
        server_name wastewatch.duckdns.org;

        # Let's Encrypt ACME challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            allow all;
        }

        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS server for production
    server {
        listen 443 ssl http2;
        server_name wastewatch.duckdns.org;

        # SSL Configuration
        ssl_certificate /etc/letsencrypt/live/wastewatch.duckdns.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/wastewatch.duckdns.org/privkey.pem;

        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/letsencrypt/live/wastewatch.duckdns.org/chain.pem;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: blob: https:; font-src 'self' data: https:; connect-src 'self' https: wss:; media-src 'self' https:; object-src 'none'; frame-ancestors 'self';" always;

        # Client settings
        client_max_body_size 10M;
        client_header_timeout 60s;
        client_body_timeout 60s;

        # Authentication endpoints with stricter rate limiting
        location ~ ^/api/(auth|signin|signup) {
            limit_req zone=auth burst=10 nodelay;

            # Handle preflight OPTIONS requests for CORS
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'https://wastewatch.duckdns.org' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, X-Requested-With, Cache-Control, Origin' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' '3600' always;
                add_header 'Content-Type' 'text/plain' always;
                add_header 'Content-Length' '0' always;
                return 204;
            }

            proxy_pass http://wastewatch-web;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_cache_bypass $http_upgrade;

            # Authentication timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # CORS headers for authentication responses
            add_header 'Access-Control-Allow-Origin' 'https://wastewatch.duckdns.org' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Expose-Headers' 'Authorization, Content-Type' always;
        }

        # Classification endpoints with special handling
        location /api/classification/ {
            limit_req zone=uploads burst=10 nodelay;

            # Handle preflight OPTIONS requests for CORS
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'https://wastewatch.duckdns.org' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, X-Requested-With, Cache-Control, Origin' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' '3600' always;
                add_header 'Content-Type' 'text/plain' always;
                add_header 'Content-Length' '0' always;
                return 204;
            }

            proxy_pass http://wastewatch-web;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;

            # Special settings for classification operations
            client_max_body_size 50M;
            proxy_request_buffering off;
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;

            # CORS headers for classification responses
            add_header 'Access-Control-Allow-Origin' 'https://wastewatch.duckdns.org' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Expose-Headers' 'Authorization, Content-Type' always;
        }

        # File upload endpoints
        location ~ ^/api/(files|uploads)/ {
            limit_req zone=uploads burst=5 nodelay;

            # Handle preflight OPTIONS requests for CORS
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'https://wastewatch.duckdns.org' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, X-Requested-With, Cache-Control, Origin' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' '3600' always;
                add_header 'Content-Type' 'text/plain' always;
                add_header 'Content-Length' '0' always;
                return 204;
            }

            proxy_pass http://wastewatch-web;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;

            # Special settings for file uploads
            client_max_body_size 100M;
            proxy_request_buffering off;
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;

            # CORS headers for upload responses
            add_header 'Access-Control-Allow-Origin' 'https://wastewatch.duckdns.org' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Expose-Headers' 'Authorization, Content-Type' always;
        }

        # API routes - Backend Spring Boot (general endpoints)
        location /api/ {
            limit_req zone=api burst=20 nodelay;

            # Handle preflight OPTIONS requests for CORS
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'https://wastewatch.duckdns.org' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, X-Requested-With, Cache-Control, Origin' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' '3600' always;
                add_header 'Content-Type' 'text/plain' always;
                add_header 'Content-Length' '0' always;
                return 204;
            }

            proxy_pass http://wastewatch-web;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_cache_bypass $http_upgrade;

            # Standard API timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # CORS headers for API responses
            add_header 'Access-Control-Allow-Origin' 'https://wastewatch.duckdns.org' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Expose-Headers' 'Authorization, Content-Type' always;
        }

        # Health check endpoints
        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location = /api/actuator/health {
            proxy_pass http://wastewatch-web;
            access_log off;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Static assets with aggressive caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif|map)$ {
            proxy_pass http://wastewatch_frontend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Long-term caching for static assets
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";

            # Gzip compression
            gzip on;
            gzip_vary on;
            gzip_min_length 1024;
            gzip_types text/css application/javascript application/json image/svg+xml;
        }

        # Frontend routes - React app
        location / {
            proxy_pass http://wastewatch_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Standard timeouts for frontend
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Fallback for React Router
            try_files $uri $uri/ @fallback;
        }

        # Fallback for React Router (SPA)
        location @fallback {
            proxy_pass http://wastewatch_frontend/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # No caching for SPA fallback
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }

        # Block common attack patterns
        location ~* \.(php|asp|aspx|jsp|cgi)$ {
            return 444;
        }

        # Block access to sensitive files
        location ~* \.(env|log|bak|backup|old|tmp|conf|ini|sql|sh)$ {
            deny all;
            return 404;
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
            return 404;
        }

        # Block specific bad requests
        location ~* (wp-admin|wp-login|phpmyadmin|admin|xmlrpc) {
            deny all;
            return 404;
        }

        # Deny access to common exploit paths
        location ~* \.(git|svn|bzr|hg) {
            deny all;
            return 404;
        }
    }
}